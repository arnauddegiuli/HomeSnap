options
{
    LOOKAHEAD=2;
    STATIC=false;
}
PARSER_BEGIN(UriParser)
package com.homesnap.webserver.servlet.house.parser;

import com.homesnap.engine.controller.light.Light.LightStateValue;
import com.homesnap.webserver.rest.MissingParameterRestOperation;
import com.homesnap.webserver.rest.RestOperationException;
import com.homesnap.webserver.rest.MyDomoRestAPI;
import com.homesnap.webserver.rest.UnsupportedRestOperation;
import java.io.ByteArrayInputStream;


public class UriParser implements MyDomoRestAPI
{
/*
CONTROLLER
[/house/labels/labelId/where || /house/groups/groupId/where || /controllers/where]

Light:
/[on|off] || [?what=on||?what=off]

Automation:
/[up|down|stop] || [?what=up||?what=down||?what=stop]

heating:
/[heating_on||heating_off||...status]/dimension?value || [?what=heating_on||heating_off|| ...] => seule la premiere permet de r√©gler les dimensions!

HOUSE SERVLER

/house																			GET/DELETE
/house/labels																	GET/DELETE
/house/labels/labelId || /house/labels/label?id=id								GET/PUT/POST/DELETE
/house/labels/labelId/where || /house/labels/labelId/controller?id=id			GET/PUT/POST/DELETE
/house/groups																	GET
/house/groups/groupId || /house/groups/group?id=id								GET
/house/groups/groupId/where || /house/groups/groupId/controller?id=id			GET


GET
/house
/house/labels
/house/labels/labelId || /house/labels/label?id=id
/house/labels/labelId/where || /house/labels/labelId/controller?id=id

/house/groups
/house/groups/groupId
/house/groups/groupId/where

POST
/house/labels/labelId (title=Titre)
/house/labels/labelId/where (who=1)


PUT
/house/labels/labelId?title=Titre
/house/labels/labelId/where?who=1

DELETE
/house
/house/labels
/house/labels/labelId || /house/labels/label?id=id
/house/labels/labelId/where || /house/labels/labelId/controller?id=id
*/

	private MyDomoRestAPI listener;

	public static void parse(String uri, MyDomoRestAPI listener) throws ParseException, UnsupportedRestOperation, RestOperationException, MissingParameterRestOperation
	{
		UriParser parser = new UriParser(new ByteArrayInputStream(uri.getBytes()));
		parser.listener = listener;
		parser.parseOneLine();
	}

	@Override
	public void onHouse() throws UnsupportedRestOperation, RestOperationException, MissingParameterRestOperation {
		listener.onHouse();
	}

	@Override
	public void onLabelList() throws UnsupportedRestOperation, RestOperationException, MissingParameterRestOperation {
		listener.onLabelList();
	}

	@Override
	public void onLabel(String labelId) throws UnsupportedRestOperation, RestOperationException, MissingParameterRestOperation {
		listener.onLabel(labelId);
	}

	@Override
	public void onControllerByLabel(String labelId, String where) throws UnsupportedRestOperation, RestOperationException, MissingParameterRestOperation {
		listener.onControllerByLabel(labelId, where);
	}

	@Override
	public void onGroupList() throws UnsupportedRestOperation, RestOperationException, MissingParameterRestOperation {
		listener.onGroupList();
	}

	@Override
	public void onGroup(String groupId) throws UnsupportedRestOperation, RestOperationException, MissingParameterRestOperation {
		listener.onGroup(groupId);
	}

	@Override
	public void onControllerByGroup(String groupId, String where) throws UnsupportedRestOperation, RestOperationException, MissingParameterRestOperation {
		listener.onControllerByGroup(groupId, where);
	}

	@Override
	public void onController(String where) throws UnsupportedRestOperation, RestOperationException, MissingParameterRestOperation {
		listener.onController(where);
	}

	@Override
	public void onLightStatus(String where, LightStateValue status) throws UnsupportedRestOperation, RestOperationException, MissingParameterRestOperation {
		listener.onLightStatus(where, status);
	}
}


PARSER_END(UriParser)
SKIP :
{
	" "
|	"\r"
|	"\t"
}
TOKEN:
{
	< HOUSE: "house">
|	< CONTROLLER: "controller">
|	< CONTROLLERS: "controllers">
|	<GROUP: "group">
|	<GROUPS: "groups">
|	<LABEL: "label">
|	<LABELS:"labels">
|	<ON:"on">
|	<OFF:"off">
|	<UP:"up">
|	<DOWN:"down">
|	<STOP:"stop">
|	< ID: (["0"-"9"])+ >
|	< EOL: "\n" >
}
private void parseOneLine() throws UnsupportedRestOperation, RestOperationException, MissingParameterRestOperation :
{
	Token labelId;
	Token groupId;
	Token where;
}
{
// /house																			GET/DELETE
// /house/labels																	GET/DELETE
// /house/labels/labelId || /house/labels/label?id=id								GET/PUT/POST/DELETE
// /house/labels/labelId/where || /house/labels/labelId/controller?id=id			GET/PUT/POST/DELETE
// /house/groups																	GET
// /house/groups/groupId || /house/groups/group?id=id								GET
// /house/groups/groupId/where || /house/groups/groupId/controller?id=id			GET



	"/" <HOUSE> (
		( "/" <LABELS> (
				"/" <LABEL> "?id=" labelId=<ID> {onLabel(labelId.toString());}
			|	"/" labelId=<ID> ( 
						"/" where=<ID> (
								automation() {return;}
							|	light(where.toString()) {return;}
							|	<EOF> {onControllerByLabel(labelId.toString(), where.toString());}
							)
					|	"/" <CONTROLLER> "?id=" where=<ID> {onControllerByLabel(labelId.toString(), where.toString());}
					|	<EOF> {onLabel(labelId.toString());}
					)
			| <EOF> {onLabelList();}
			)
		| "/" <GROUPS> (
				"/" <GROUP> "?id=" groupId=<ID> {onGroup(groupId.toString());}
			|	"/" groupId=<ID> ( 
						"/" where=<ID> (
								light(where.toString()) {return;}
							|	automation() {return;}
							|	<EOF>{onControllerByGroup(groupId.toString(), where.toString());}
							)
					|	"/" <CONTROLLER> "?id=" where=<ID> {onControllerByGroup(groupId.toString(), where.toString());}
					|	<EOF> {onGroup(groupId.toString());}
					)
			|	<EOF> {onGroupList();}
			)
		| "/" <CONTROLLERS> (
				"/" where=<ID> ( 
						light(where.toString()) {return;}
					|	automation() {return;}
					|	<EOF> {onController(where.toString());}
					)
			|	"/" <CONTROLLER> "?id=" where=<ID> {onController(where.toString());}
			)
		)
		| <EOF> {onHouse();}
	)
	| <EOF> {return;}
}

void light(String where) throws UnsupportedRestOperation, RestOperationException, MissingParameterRestOperation:
{
}
{
	"/" (
			<ON> <EOF> {onLightStatus(where, LightStateValue.LIGHT_ON);}
		|	<OFF> <EOF> {onLightStatus(where, LightStateValue.LIGHT_OFF);}
		)
	| "?what=on" {onLightStatus(where, LightStateValue.LIGHT_ON);}
	| "?what=off" {onLightStatus(where, LightStateValue.LIGHT_OFF);}
}

void automation():
{
}
{
	"/" (
		<UP> <EOF>{System.out.println("volet UP");}
	|	<DOWN> <EOF>{System.out.println("volet DOWN");}
	)
}